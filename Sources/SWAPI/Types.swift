// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// - Remark: HTTP `GET /people`.
    /// - Remark: Generated from `#/paths//people/get(listPeople)`.
    func listPeople(_ input: Operations.ListPeople.Input) async throws -> Operations.ListPeople.Output
    /// - Remark: HTTP `GET /people/{id}`.
    /// - Remark: Generated from `#/paths//people/{id}/get(getPerson)`.
    func getPerson(_ input: Operations.GetPerson.Input) async throws -> Operations.GetPerson.Output
    /// - Remark: HTTP `GET /planets`.
    /// - Remark: Generated from `#/paths//planets/get(listPlanets)`.
    func listPlanets(_ input: Operations.ListPlanets.Input) async throws -> Operations.ListPlanets.Output
    /// - Remark: HTTP `GET /planets/{id}`.
    /// - Remark: Generated from `#/paths//planets/{id}/get(getPlanet)`.
    func getPlanet(_ input: Operations.GetPlanet.Input) async throws -> Operations.GetPlanet.Output
    /// - Remark: HTTP `GET /starships`.
    /// - Remark: Generated from `#/paths//starships/get(listStarships)`.
    func listStarships(_ input: Operations.ListStarships.Input) async throws -> Operations.ListStarships.Output
    /// - Remark: HTTP `GET /starships/{id}`.
    /// - Remark: Generated from `#/paths//starships/{id}/get(getStarship)`.
    func getStarship(_ input: Operations.GetStarship.Input) async throws -> Operations.GetStarship.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// - Remark: HTTP `GET /people`.
    /// - Remark: Generated from `#/paths//people/get(listPeople)`.
    public func listPeople(
        query: Operations.ListPeople.Input.Query = .init(),
        headers: Operations.ListPeople.Input.Headers = .init()
    ) async throws -> Operations.ListPeople.Output {
        try await listPeople(Operations.ListPeople.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /people/{id}`.
    /// - Remark: Generated from `#/paths//people/{id}/get(getPerson)`.
    public func getPerson(
        path: Operations.GetPerson.Input.Path,
        headers: Operations.GetPerson.Input.Headers = .init()
    ) async throws -> Operations.GetPerson.Output {
        try await getPerson(Operations.GetPerson.Input(
            path: path,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /planets`.
    /// - Remark: Generated from `#/paths//planets/get(listPlanets)`.
    public func listPlanets(
        query: Operations.ListPlanets.Input.Query = .init(),
        headers: Operations.ListPlanets.Input.Headers = .init()
    ) async throws -> Operations.ListPlanets.Output {
        try await listPlanets(Operations.ListPlanets.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /planets/{id}`.
    /// - Remark: Generated from `#/paths//planets/{id}/get(getPlanet)`.
    public func getPlanet(
        path: Operations.GetPlanet.Input.Path,
        headers: Operations.GetPlanet.Input.Headers = .init()
    ) async throws -> Operations.GetPlanet.Output {
        try await getPlanet(Operations.GetPlanet.Input(
            path: path,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /starships`.
    /// - Remark: Generated from `#/paths//starships/get(listStarships)`.
    public func listStarships(
        query: Operations.ListStarships.Input.Query = .init(),
        headers: Operations.ListStarships.Input.Headers = .init()
    ) async throws -> Operations.ListStarships.Output {
        try await listStarships(Operations.ListStarships.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /starships/{id}`.
    /// - Remark: Generated from `#/paths//starships/{id}/get(getStarship)`.
    public func getStarship(
        path: Operations.GetStarship.Input.Path,
        headers: Operations.GetStarship.Input.Headers = .init()
    ) async throws -> Operations.GetStarship.Output {
        try await getStarship(Operations.GetStarship.Input(
            path: path,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public enum Server1 {
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://www.swapi.tech/api",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://www.swapi.tech/api",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/ListItem`.
        public struct ListItem: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListItem/uid`.
            public var uid: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListItem/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListItem/url`.
            public var url: Swift.String?
            /// Creates a new `ListItem`.
            ///
            /// - Parameters:
            ///   - uid:
            ///   - name:
            ///   - url:
            public init(
                uid: Swift.String? = nil,
                name: Swift.String? = nil,
                url: Swift.String? = nil
            ) {
                self.uid = uid
                self.name = name
                self.url = url
            }
            public enum CodingKeys: String, CodingKey {
                case uid
                case name
                case url
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListResponse`.
        public struct ListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListResponse/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListResponse/total_records`.
            public var totalRecords: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ListResponse/total_pages`.
            public var totalPages: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ListResponse/previous`.
            public var previous: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListResponse/next`.
            public var next: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListResponse/results`.
            public var results: [Components.Schemas.ListItem]?
            /// Creates a new `ListResponse`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - totalRecords:
            ///   - totalPages:
            ///   - previous:
            ///   - next:
            ///   - results:
            public init(
                message: Swift.String? = nil,
                totalRecords: Swift.Int? = nil,
                totalPages: Swift.Int? = nil,
                previous: Swift.String? = nil,
                next: Swift.String? = nil,
                results: [Components.Schemas.ListItem]? = nil
            ) {
                self.message = message
                self.totalRecords = totalRecords
                self.totalPages = totalPages
                self.previous = previous
                self.next = next
                self.results = results
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case totalRecords = "total_records"
                case totalPages = "total_pages"
                case previous
                case next
                case results
            }
        }
        /// - Remark: Generated from `#/components/schemas/PersonResponse`.
        public struct PersonResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PersonResponse/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PersonResponse/result`.
            public struct ResultPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PersonResponse/result/properties`.
                public struct PropertiesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/PersonResponse/result/properties/height`.
                    public var height: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/PersonResponse/result/properties/mass`.
                    public var mass: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/PersonResponse/result/properties/hair_color`.
                    public var hairColor: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/PersonResponse/result/properties/skin_color`.
                    public var skinColor: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/PersonResponse/result/properties/eye_color`.
                    public var eyeColor: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/PersonResponse/result/properties/birth_year`.
                    public var birthYear: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/PersonResponse/result/properties/gender`.
                    public var gender: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/PersonResponse/result/properties/created`.
                    public var created: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/PersonResponse/result/properties/edited`.
                    public var edited: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/PersonResponse/result/properties/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/PersonResponse/result/properties/homeworld`.
                    public var homeworld: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/PersonResponse/result/properties/url`.
                    public var url: Swift.String?
                    /// Creates a new `PropertiesPayload`.
                    ///
                    /// - Parameters:
                    ///   - height:
                    ///   - mass:
                    ///   - hairColor:
                    ///   - skinColor:
                    ///   - eyeColor:
                    ///   - birthYear:
                    ///   - gender:
                    ///   - created:
                    ///   - edited:
                    ///   - name:
                    ///   - homeworld:
                    ///   - url:
                    public init(
                        height: Swift.String? = nil,
                        mass: Swift.String? = nil,
                        hairColor: Swift.String? = nil,
                        skinColor: Swift.String? = nil,
                        eyeColor: Swift.String? = nil,
                        birthYear: Swift.String? = nil,
                        gender: Swift.String? = nil,
                        created: Swift.String? = nil,
                        edited: Swift.String? = nil,
                        name: Swift.String? = nil,
                        homeworld: Swift.String? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.height = height
                        self.mass = mass
                        self.hairColor = hairColor
                        self.skinColor = skinColor
                        self.eyeColor = eyeColor
                        self.birthYear = birthYear
                        self.gender = gender
                        self.created = created
                        self.edited = edited
                        self.name = name
                        self.homeworld = homeworld
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case height
                        case mass
                        case hairColor = "hair_color"
                        case skinColor = "skin_color"
                        case eyeColor = "eye_color"
                        case birthYear = "birth_year"
                        case gender
                        case created
                        case edited
                        case name
                        case homeworld
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/PersonResponse/result/properties`.
                public var properties: Components.Schemas.PersonResponse.ResultPayload.PropertiesPayload?
                /// - Remark: Generated from `#/components/schemas/PersonResponse/result/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/PersonResponse/result/_id`.
                public var _id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/PersonResponse/result/uid`.
                public var uid: Swift.String?
                /// - Remark: Generated from `#/components/schemas/PersonResponse/result/__v`.
                public var __v: Swift.Int?
                /// Creates a new `ResultPayload`.
                ///
                /// - Parameters:
                ///   - properties:
                ///   - description:
                ///   - _id:
                ///   - uid:
                ///   - __v:
                public init(
                    properties: Components.Schemas.PersonResponse.ResultPayload.PropertiesPayload? = nil,
                    description: Swift.String? = nil,
                    _id: Swift.String? = nil,
                    uid: Swift.String? = nil,
                    __v: Swift.Int? = nil
                ) {
                    self.properties = properties
                    self.description = description
                    self._id = _id
                    self.uid = uid
                    self.__v = __v
                }
                public enum CodingKeys: String, CodingKey {
                    case properties
                    case description
                    case _id
                    case uid
                    case __v
                }
            }
            /// - Remark: Generated from `#/components/schemas/PersonResponse/result`.
            public var result: Components.Schemas.PersonResponse.ResultPayload?
            /// Creates a new `PersonResponse`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - result:
            public init(
                message: Swift.String? = nil,
                result: Components.Schemas.PersonResponse.ResultPayload? = nil
            ) {
                self.message = message
                self.result = result
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case result
            }
        }
        /// - Remark: Generated from `#/components/schemas/PlanetResponse`.
        public struct PlanetResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PlanetResponse/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PlanetResponse/result`.
            public struct ResultPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PlanetResponse/result/properties`.
                public struct PropertiesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/PlanetResponse/result/properties/diameter`.
                    public var diameter: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/PlanetResponse/result/properties/rotation_period`.
                    public var rotationPeriod: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/PlanetResponse/result/properties/orbital_period`.
                    public var orbitalPeriod: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/PlanetResponse/result/properties/gravity`.
                    public var gravity: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/PlanetResponse/result/properties/population`.
                    public var population: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/PlanetResponse/result/properties/climate`.
                    public var climate: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/PlanetResponse/result/properties/terrain`.
                    public var terrain: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/PlanetResponse/result/properties/surface_water`.
                    public var surfaceWater: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/PlanetResponse/result/properties/created`.
                    public var created: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/PlanetResponse/result/properties/edited`.
                    public var edited: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/PlanetResponse/result/properties/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/PlanetResponse/result/properties/url`.
                    public var url: Swift.String?
                    /// Creates a new `PropertiesPayload`.
                    ///
                    /// - Parameters:
                    ///   - diameter:
                    ///   - rotationPeriod:
                    ///   - orbitalPeriod:
                    ///   - gravity:
                    ///   - population:
                    ///   - climate:
                    ///   - terrain:
                    ///   - surfaceWater:
                    ///   - created:
                    ///   - edited:
                    ///   - name:
                    ///   - url:
                    public init(
                        diameter: Swift.String? = nil,
                        rotationPeriod: Swift.String? = nil,
                        orbitalPeriod: Swift.String? = nil,
                        gravity: Swift.String? = nil,
                        population: Swift.String? = nil,
                        climate: Swift.String? = nil,
                        terrain: Swift.String? = nil,
                        surfaceWater: Swift.String? = nil,
                        created: Swift.String? = nil,
                        edited: Swift.String? = nil,
                        name: Swift.String? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.diameter = diameter
                        self.rotationPeriod = rotationPeriod
                        self.orbitalPeriod = orbitalPeriod
                        self.gravity = gravity
                        self.population = population
                        self.climate = climate
                        self.terrain = terrain
                        self.surfaceWater = surfaceWater
                        self.created = created
                        self.edited = edited
                        self.name = name
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case diameter
                        case rotationPeriod = "rotation_period"
                        case orbitalPeriod = "orbital_period"
                        case gravity
                        case population
                        case climate
                        case terrain
                        case surfaceWater = "surface_water"
                        case created
                        case edited
                        case name
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/PlanetResponse/result/properties`.
                public var properties: Components.Schemas.PlanetResponse.ResultPayload.PropertiesPayload?
                /// - Remark: Generated from `#/components/schemas/PlanetResponse/result/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/PlanetResponse/result/_id`.
                public var _id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/PlanetResponse/result/uid`.
                public var uid: Swift.String?
                /// - Remark: Generated from `#/components/schemas/PlanetResponse/result/__v`.
                public var __v: Swift.Int?
                /// Creates a new `ResultPayload`.
                ///
                /// - Parameters:
                ///   - properties:
                ///   - description:
                ///   - _id:
                ///   - uid:
                ///   - __v:
                public init(
                    properties: Components.Schemas.PlanetResponse.ResultPayload.PropertiesPayload? = nil,
                    description: Swift.String? = nil,
                    _id: Swift.String? = nil,
                    uid: Swift.String? = nil,
                    __v: Swift.Int? = nil
                ) {
                    self.properties = properties
                    self.description = description
                    self._id = _id
                    self.uid = uid
                    self.__v = __v
                }
                public enum CodingKeys: String, CodingKey {
                    case properties
                    case description
                    case _id
                    case uid
                    case __v
                }
            }
            /// - Remark: Generated from `#/components/schemas/PlanetResponse/result`.
            public var result: Components.Schemas.PlanetResponse.ResultPayload?
            /// Creates a new `PlanetResponse`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - result:
            public init(
                message: Swift.String? = nil,
                result: Components.Schemas.PlanetResponse.ResultPayload? = nil
            ) {
                self.message = message
                self.result = result
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case result
            }
        }
        /// - Remark: Generated from `#/components/schemas/StarshipResponse`.
        public struct StarshipResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/StarshipResponse/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StarshipResponse/result`.
            public struct ResultPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StarshipResponse/result/properties`.
                public struct PropertiesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/StarshipResponse/result/properties/model`.
                    public var model: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/StarshipResponse/result/properties/starship_class`.
                    public var starshipClass: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/StarshipResponse/result/properties/manufacturer`.
                    public var manufacturer: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/StarshipResponse/result/properties/cost_in_credits`.
                    public var costInCredits: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/StarshipResponse/result/properties/length`.
                    public var length: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/StarshipResponse/result/properties/crew`.
                    public var crew: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/StarshipResponse/result/properties/passengers`.
                    public var passengers: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/StarshipResponse/result/properties/max_atmosphering_speed`.
                    public var maxAtmospheringSpeed: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/StarshipResponse/result/properties/hyperdrive_rating`.
                    public var hyperdriveRating: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/StarshipResponse/result/properties/MGLT`.
                    public var mglt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/StarshipResponse/result/properties/cargo_capacity`.
                    public var cargoCapacity: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/StarshipResponse/result/properties/consumables`.
                    public var consumables: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/StarshipResponse/result/properties/pilots`.
                    public var pilots: [Swift.String]?
                    /// - Remark: Generated from `#/components/schemas/StarshipResponse/result/properties/created`.
                    public var created: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/StarshipResponse/result/properties/edited`.
                    public var edited: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/StarshipResponse/result/properties/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/StarshipResponse/result/properties/url`.
                    public var url: Swift.String?
                    /// Creates a new `PropertiesPayload`.
                    ///
                    /// - Parameters:
                    ///   - model:
                    ///   - starshipClass:
                    ///   - manufacturer:
                    ///   - costInCredits:
                    ///   - length:
                    ///   - crew:
                    ///   - passengers:
                    ///   - maxAtmospheringSpeed:
                    ///   - hyperdriveRating:
                    ///   - mglt:
                    ///   - cargoCapacity:
                    ///   - consumables:
                    ///   - pilots:
                    ///   - created:
                    ///   - edited:
                    ///   - name:
                    ///   - url:
                    public init(
                        model: Swift.String? = nil,
                        starshipClass: Swift.String? = nil,
                        manufacturer: Swift.String? = nil,
                        costInCredits: Swift.String? = nil,
                        length: Swift.String? = nil,
                        crew: Swift.String? = nil,
                        passengers: Swift.String? = nil,
                        maxAtmospheringSpeed: Swift.String? = nil,
                        hyperdriveRating: Swift.String? = nil,
                        mglt: Swift.String? = nil,
                        cargoCapacity: Swift.String? = nil,
                        consumables: Swift.String? = nil,
                        pilots: [Swift.String]? = nil,
                        created: Swift.String? = nil,
                        edited: Swift.String? = nil,
                        name: Swift.String? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.model = model
                        self.starshipClass = starshipClass
                        self.manufacturer = manufacturer
                        self.costInCredits = costInCredits
                        self.length = length
                        self.crew = crew
                        self.passengers = passengers
                        self.maxAtmospheringSpeed = maxAtmospheringSpeed
                        self.hyperdriveRating = hyperdriveRating
                        self.mglt = mglt
                        self.cargoCapacity = cargoCapacity
                        self.consumables = consumables
                        self.pilots = pilots
                        self.created = created
                        self.edited = edited
                        self.name = name
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case model
                        case starshipClass = "starship_class"
                        case manufacturer
                        case costInCredits = "cost_in_credits"
                        case length
                        case crew
                        case passengers
                        case maxAtmospheringSpeed = "max_atmosphering_speed"
                        case hyperdriveRating = "hyperdrive_rating"
                        case mglt = "MGLT"
                        case cargoCapacity = "cargo_capacity"
                        case consumables
                        case pilots
                        case created
                        case edited
                        case name
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/StarshipResponse/result/properties`.
                public var properties: Components.Schemas.StarshipResponse.ResultPayload.PropertiesPayload?
                /// - Remark: Generated from `#/components/schemas/StarshipResponse/result/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/StarshipResponse/result/_id`.
                public var _id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/StarshipResponse/result/uid`.
                public var uid: Swift.String?
                /// - Remark: Generated from `#/components/schemas/StarshipResponse/result/__v`.
                public var __v: Swift.Int?
                /// Creates a new `ResultPayload`.
                ///
                /// - Parameters:
                ///   - properties:
                ///   - description:
                ///   - _id:
                ///   - uid:
                ///   - __v:
                public init(
                    properties: Components.Schemas.StarshipResponse.ResultPayload.PropertiesPayload? = nil,
                    description: Swift.String? = nil,
                    _id: Swift.String? = nil,
                    uid: Swift.String? = nil,
                    __v: Swift.Int? = nil
                ) {
                    self.properties = properties
                    self.description = description
                    self._id = _id
                    self.uid = uid
                    self.__v = __v
                }
                public enum CodingKeys: String, CodingKey {
                    case properties
                    case description
                    case _id
                    case uid
                    case __v
                }
            }
            /// - Remark: Generated from `#/components/schemas/StarshipResponse/result`.
            public var result: Components.Schemas.StarshipResponse.ResultPayload?
            /// Creates a new `StarshipResponse`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - result:
            public init(
                message: Swift.String? = nil,
                result: Components.Schemas.StarshipResponse.ResultPayload? = nil
            ) {
                self.message = message
                self.result = result
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case result
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// - Remark: HTTP `GET /people`.
    /// - Remark: Generated from `#/paths//people/get(listPeople)`.
    public enum ListPeople {
        public static let id: Swift.String = "listPeople"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/people/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/people/GET/query/page`.
                public var page: Swift.Int?
                /// - Remark: Generated from `#/paths/people/GET/query/limit`.
                public var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page:
                ///   - limit:
                public init(
                    page: Swift.Int? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.page = page
                    self.limit = limit
                }
            }
            public var query: Operations.ListPeople.Input.Query
            /// - Remark: Generated from `#/paths/people/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListPeople.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListPeople.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ListPeople.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.ListPeople.Input.Query = .init(),
                headers: Operations.ListPeople.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/people/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/people/GET/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/people/GET/responses/200/content/json/message`.
                        public var message: Swift.String?
                        /// - Remark: Generated from `#/paths/people/GET/responses/200/content/json/total_records`.
                        public var totalRecords: Swift.Int?
                        /// - Remark: Generated from `#/paths/people/GET/responses/200/content/json/total_pages`.
                        public var totalPages: Swift.Int?
                        /// - Remark: Generated from `#/paths/people/GET/responses/200/content/json/previous`.
                        public var previous: Swift.String?
                        /// - Remark: Generated from `#/paths/people/GET/responses/200/content/json/next`.
                        public var next: Swift.String?
                        /// - Remark: Generated from `#/paths/people/GET/responses/200/content/json/results`.
                        public var results: [Components.Schemas.ListItem]?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - message:
                        ///   - totalRecords:
                        ///   - totalPages:
                        ///   - previous:
                        ///   - next:
                        ///   - results:
                        public init(
                            message: Swift.String? = nil,
                            totalRecords: Swift.Int? = nil,
                            totalPages: Swift.Int? = nil,
                            previous: Swift.String? = nil,
                            next: Swift.String? = nil,
                            results: [Components.Schemas.ListItem]? = nil
                        ) {
                            self.message = message
                            self.totalRecords = totalRecords
                            self.totalPages = totalPages
                            self.previous = previous
                            self.next = next
                            self.results = results
                        }
                        public enum CodingKeys: String, CodingKey {
                            case message
                            case totalRecords = "total_records"
                            case totalPages = "total_pages"
                            case previous
                            case next
                            case results
                        }
                    }
                    /// - Remark: Generated from `#/paths/people/GET/responses/200/content/application\/json`.
                    case json(Operations.ListPeople.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.ListPeople.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ListPeople.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ListPeople.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//people/get(listPeople)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ListPeople.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ListPeople.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /people/{id}`.
    /// - Remark: Generated from `#/paths//people/{id}/get(getPerson)`.
    public enum GetPerson {
        public static let id: Swift.String = "getPerson"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/people/{id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/people/{id}/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.GetPerson.Input.Path
            /// - Remark: Generated from `#/paths/people/{id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetPerson.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetPerson.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetPerson.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.GetPerson.Input.Path,
                headers: Operations.GetPerson.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/people/{id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/people/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.PersonResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PersonResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetPerson.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetPerson.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//people/{id}/get(getPerson)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetPerson.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetPerson.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /planets`.
    /// - Remark: Generated from `#/paths//planets/get(listPlanets)`.
    public enum ListPlanets {
        public static let id: Swift.String = "listPlanets"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/planets/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/planets/GET/query/page`.
                public var page: Swift.Int?
                /// - Remark: Generated from `#/paths/planets/GET/query/limit`.
                public var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page:
                ///   - limit:
                public init(
                    page: Swift.Int? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.page = page
                    self.limit = limit
                }
            }
            public var query: Operations.ListPlanets.Input.Query
            /// - Remark: Generated from `#/paths/planets/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListPlanets.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListPlanets.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ListPlanets.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.ListPlanets.Input.Query = .init(),
                headers: Operations.ListPlanets.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/planets/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/planets/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ListPlanets.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ListPlanets.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//planets/get(listPlanets)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ListPlanets.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ListPlanets.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /planets/{id}`.
    /// - Remark: Generated from `#/paths//planets/{id}/get(getPlanet)`.
    public enum GetPlanet {
        public static let id: Swift.String = "getPlanet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/planets/{id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/planets/{id}/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.GetPlanet.Input.Path
            /// - Remark: Generated from `#/paths/planets/{id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetPlanet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetPlanet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetPlanet.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.GetPlanet.Input.Path,
                headers: Operations.GetPlanet.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/planets/{id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/planets/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.PlanetResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PlanetResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetPlanet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetPlanet.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//planets/{id}/get(getPlanet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetPlanet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetPlanet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /starships`.
    /// - Remark: Generated from `#/paths//starships/get(listStarships)`.
    public enum ListStarships {
        public static let id: Swift.String = "listStarships"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/starships/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/starships/GET/query/page`.
                public var page: Swift.Int?
                /// - Remark: Generated from `#/paths/starships/GET/query/limit`.
                public var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page:
                ///   - limit:
                public init(
                    page: Swift.Int? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.page = page
                    self.limit = limit
                }
            }
            public var query: Operations.ListStarships.Input.Query
            /// - Remark: Generated from `#/paths/starships/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListStarships.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListStarships.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ListStarships.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.ListStarships.Input.Query = .init(),
                headers: Operations.ListStarships.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/starships/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/starships/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ListStarships.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ListStarships.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//starships/get(listStarships)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ListStarships.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ListStarships.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /starships/{id}`.
    /// - Remark: Generated from `#/paths//starships/{id}/get(getStarship)`.
    public enum GetStarship {
        public static let id: Swift.String = "getStarship"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/starships/{id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/starships/{id}/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.GetStarship.Input.Path
            /// - Remark: Generated from `#/paths/starships/{id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetStarship.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetStarship.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetStarship.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.GetStarship.Input.Path,
                headers: Operations.GetStarship.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/starships/{id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/starships/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.StarshipResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.StarshipResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetStarship.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetStarship.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//starships/{id}/get(getStarship)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetStarship.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetStarship.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
